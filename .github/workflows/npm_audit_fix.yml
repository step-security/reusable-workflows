name: NPM Audit Fix and PR

on:
  workflow_call:
    inputs:
      force:
        description: "Use --force flag for npm audit fix?"
        required: true
        type: boolean
      base_branch:
        description: "Specify a base branch (default: main)"
        required: false
        type: string
        default: "main"
      use_private_packages:
        description: "Use private packages (default: false)"
        required: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  audit-fix:
    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
        with:
          node-version: "20"
          cache: "npm"
      
      - name: Authenticate npm with GitHub Packages (if using private packages)
        if: inputs.use_private_packages == true
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > ~/.npmrc
          echo "@${{ github.repository_owner }}:registry=https://npm.pkg.github.com/" >> ~/.npmrc
          cat ~/.npmrc

      - name: Install dependencies
        run: |
          cat ~/.npmrc
          npm ci
  
      - name: Run npm audit fix
        run: |
          if [ "${{ inputs.force }}" == "true" ]; then
            npm audit fix --force || echo "No fixes needed"
          else
            npm audit fix || echo "No fixes needed"
          fi

      - name: Build Project
        run: npm run build

      - name: Check for Changes
        id: check_changes
        run: |
          git add .

          if git diff --cached --exit-code; then
            echo "No changes detected."
            echo "changes=false" >> $GITHUB_ENV
          else
            echo "changes=true" >> $GITHUB_ENV
          fi

      - name: Get Latest Commit SHA from Base Branch
        if: env.changes == 'true'
        id: get_sha
        run: |
          echo "Fetching the latest commit SHA from ${{ inputs.base_branch }}..."
          SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ inputs.base_branch }} | jq -r .object.sha)
          echo "sha=$SHA" >> $GITHUB_ENV

      - name: Create New Branch
        if: env.changes == 'true'
        id: create_branch
        run: |
          FORCE_MODE="${{ inputs.force }}"
          BASE_BRANCH="${{ inputs.base_branch }}"

          if [ "$FORCE_MODE" == "true" ]; then
            BRANCH_NAME="npm-audit-fix-force-$(date +'%Y-%m-%d-%H-%M-%S')"
            COMMIT_MESSAGE="fix: apply npm audit fix --force"
            PR_TITLE="fix: Security updates via npm audit fix --force"
            PR_BODY=$(echo "This PR applies security updates via npm audit fix --force.")
          else
            BRANCH_NAME="npm-audit-fix-$(date +'%Y-%m-%d-%H-%M-%S')"
            COMMIT_MESSAGE="fix: apply npm audit fix"
            PR_TITLE="fix: Security updates via npm audit fix"
            PR_BODY=$(echo "This PR applies security updates via npm audit fix.")
          fi

          echo "Creating a new branch: $BRANCH_NAME..."
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"ref\":\"refs/heads/$BRANCH_NAME\", \"sha\":\"${{ env.sha }}\"}" \
            https://api.github.com/repos/${{ github.repository }}/git/refs
          
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "PR_BODY=$PR_BODY" >> $GITHUB_ENV
          echo "BASE_BRANCH=$BASE_BRANCH" >> $GITHUB_ENV

      - name: Commit Changes Using GitHub API
        if: env.changes == 'true'
        run: |
          echo "Committing changes to $BRANCH_NAME..."
          FILES_CHANGED=$(git status --porcelain | awk '{print $2}')
          for file in $FILES_CHANGED; do
            CONTENT=$(base64 -w 0 $file)
            FILENAME=$(basename $file)
            SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/contents/$file?ref=${{ env.BRANCH_NAME }} | jq -r .sha)
            if [ "$SHA" == "null" ]; then
              SHA=""
            fi

            # Store JSON payload in a temporary file
            JSON_PAYLOAD=$(mktemp)
            echo "{
              \"message\": \"${{ env.COMMIT_MESSAGE }}\",
              \"content\": \"$CONTENT\",
              \"branch\": \"${{ env.BRANCH_NAME }}\",
              \"sha\": \"$SHA\"
            }" > $JSON_PAYLOAD

            # Use --data-binary to send the payload
            curl -s -X PUT -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data-binary @"$JSON_PAYLOAD" \
              https://api.github.com/repos/${{ github.repository }}/contents/$file
          done


      - name: Create Pull Request Using API
        if: env.changes == 'true'
        run: |
          echo "Creating a pull request..."
          
          ESCAPED_TITLE=$(echo "${{ env.PR_TITLE }}" | jq -Rsa .)
          ESCAPED_BODY=$(echo "${{ env.PR_BODY }}" | jq -Rsa .)

          API_RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{
              \"title\": $ESCAPED_TITLE,
              \"body\": $ESCAPED_BODY,
              \"head\": \"${{ env.BRANCH_NAME }}\",
              \"base\": \"${{ inputs.base_branch }}\",
              \"draft\": false
            }" "https://api.github.com/repos/${{ github.repository }}/pulls")

          echo "API Response: $API_RESPONSE"

          PR_URL=$(echo "$API_RESPONSE" | jq -r '.html_url')

          if [[ "$PR_URL" == "null" ]]; then
            echo "❌ Error: PR creation failed. Check API response above."
            exit 1
          else
            echo "✅ Pull Request created: $PR_URL"
          fi

